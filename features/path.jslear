/*
  - Please take into consideration that file paths should be handled differently based on one's opeating system
  - Project can only be ran in the project's directory.

  This will be apart of an awesome directory toggler.
  Using a pointer I can 

*/

import {stat, readdir} from "fs/promises";
import path, {join} from "path";
import os from "os";



class Path
{
  constructor()
  {
    this.currentDirectory = os.homedir(); // This should list out the home directory 
    //this.maxDepth = 5;
    this.directoryLayers = // This is a stack
    [ 
        // First layer is always the home directory
    ];
  }
  
  loadPath()
  { // This function is always ran first to check whether or not the path already exists. If the path does exist check its validity 
    return;
  }

  async readDirectory(path)
  { // Adding my own reusable filtering
    return (await readdir(path)).filter( file => !file.startsWith("."))
  }
  
  async listDirectory() // ensuring items
  {
    const files = await this.readDirectory(this.currentDirectory);
    return files;
  }
  
  
  async viewDirectory(directory) // viewing the directory doesn't write the change, but allows the user to view its content to ensure it's the correct directory.
  {
    // First check if it's a directory / folder , if not it can't be selected
    const folder = path.join(this.currentDirectory, directory);
    const directoryStats = await stat(folder);

    if(!directoryStats.isDirectory())
    {
      // Empty array meaning there's nothing inside of this directory. Will manage the response later.
      return false;
    }
    // list of items.
    return await this.readDirectory(folder);
  }

  // These two functionalities will be controlled by the arrow keys, gotta write new controllers for these two.
  
  async enterDirectory(dir)
  {
    // Setting the matrix, confirming we're currently in that directory.

    if(dir != this.currentDirectory) // For new directories being added to the main path
    {
      const folder = path.join(this.currentDirectory,dir);
      this.directoryLayers.push(await this.readDirectory(folder));
      this.currentDirectory = folder;
    }
    else                            // For the main home path of the user
    {
      this.directoryLayers.push(await this.readDirectory(dir));
    }

    // Setting the new path
  }

  async leaveDirectory()
  { 
    // this is set into place so you cannot get past the home directory
    if(this.currentLayer == 1)
    {
      //console.log("You cannot go back any further")
      return false;
    }


    // clear its content in the layer
    this.currentLayer -= 1;
    this.directoryLayers[this.currentLayer] = []

    // change the path
    // To go back to the previous directory, we can just change current directory to its parent.
    this.currentDirectory = path.dirname(this.currentDirectory);

    return true;
  }


}

/*const moose = new Path();

Testing the opeartions to see if they work
const test = async function()
{
    // This function is always called first to ensure we make a matrix with the appropriate starting directory. Home directory of the user.
    await moose.enterDirectory(moose.currentDirectory);
    
    // Testing directory
    //console.log(await moose.viewDirectory(moose.directoryLayers[moose.currentLayer - 1][0]));
    // Testing another kind of file,
    //console.log(await moose.viewDirectory(moose.directoryLayers[moose.currentLayer - 1][14]));


    await moose.enterDirectory( moose.directoryLayers[moose.currentLayer-1][3] );

    await moose.enterDirectory( moose.directoryLayers[moose.currentLayer-1][7] );

    await moose.enterDirectory( moose.directoryLayers[moose.currentLayer-1][3] );

    await moose.enterDirectory( moose.directoryLayers[moose.currentLayer-1][24] );

    //console.log(await moose.viewDirectory(moose.directoryLayers[moose.currentLayer - 1][7]));
    console.log(moose.directoryLayers,moose.currentLayer,moose.currentDirectory);

    // leaving the current directory.
    //
    await moose.leaveDirectory();
    await moose.leaveDirectory();
    await moose.leaveDirectory();

}

test();*/

export default Path;




/*
    Vision

arrow is the where the pointer is. The pointer will 
 
 /desktop      |  Items.txt
>/moose        |  Goose.txt
 /applications |  Virus.exe 
               |  Boston.exe
      1/6               2/3

Current path = /Users/Diego/moose

choose this path?
yes or continue looking


Making it simple for someone who is new to the terminal experience.


Adding this way of seeing your files ahead of time is so awesome, makes everything easier. 



*/
